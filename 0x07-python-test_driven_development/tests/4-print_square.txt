==============================
How to use '4-print_square.py'
==============================

This module defines a 'print_square(...)' function that will print a '#'
character representation of a string equivalent to its string.

USAGE
=====

'print_square(...)' draw square representation through use of '#' character.

::

	>>> print_square = __import__('4-print_square').print_square
	>>> print_square(4)
	####
	####
	####
	####

::

The value of argument to the function can only be integer type.
===============================================================
::

	>>> print_square(None)
	Traceback (most recent call last):
		  ...
	TypeError: size must be an integer

::

	>>> print_square('3')
	Traceback (most recent call last):
		  ...
	TypeError: size must be an integer

::

	>>> print_square(4.25)
	Traceback (most recent call last):
		  ...
	TypeError: size must be an integer

::

	>>> print_square((4, 5))
	Traceback (most recent call last):
		  ...
	TypeError: size must be an integer

::

	>>> print_square([3, 4])
	Traceback (most recent call last):
		  ...
	TypeError: size must be an integer

::

	>>> print_square({4, 3})
	Traceback (most recent call last):
		  ...
	TypeError: size must be an integer

::

	>>> print_square({'one' : 1, 'two' : 2})
	Traceback (most recent call last):
		  ...
	TypeError: size must be an integer

::

The size argument is a mandatory argument.
==========================================

::

	>>> print_square()
	Traceback (most recent call last):
		  ...
	TypeError: print_square() missing 1 required positional argument: 'size'

::

The argument must be a positive integer or zero.
================================================

::

	>>> print_square(-2)
	Traceback (most recent call last):
		  ...
	ValueError: size must be >= 0

::
